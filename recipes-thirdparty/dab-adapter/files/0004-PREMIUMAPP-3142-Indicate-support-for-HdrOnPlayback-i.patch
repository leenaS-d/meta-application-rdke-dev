From 66d66f5a88b4aceb9446b6ad01e4a01d919d39b0 Mon Sep 17 00:00:00 2001
From: Adam Stolcenburg <adam_stolcenburg@comcast.com>
Date: Tue, 14 Jan 2025 12:28:11 +0100
Subject: [PATCH 4/5] PREMIUMAPP-3142 Indicate support for HdrOnPlayback
 instead of AlwaysHdr

---
 src/device/rdk/system/settings/list.rs | 10 +++---
 src/device/rdk/system/settings/set.rs  | 42 ++++++++++++++++++--------
 2 files changed, 34 insertions(+), 18 deletions(-)

diff --git a/src/device/rdk/system/settings/list.rs b/src/device/rdk/system/settings/list.rs
index d0db9e4..eee5e9f 100644
--- a/src/device/rdk/system/settings/list.rs
+++ b/src/device/rdk/system/settings/list.rs
@@ -78,13 +78,13 @@ pub fn get_rdk_hdr_settings() -> Result<Vec<HdrOutputMode>, DabError> {
 
     let settop_hdr_response: RdkResponse<GetHDRSupport> =
         rdk_request("org.rdk.DisplaySettings.getSettopHDRSupport")?;
-    let tv_hdr_response: RdkResponse<GetHDRSupport> =
-        rdk_request("org.rdk.DisplaySettings.getTvHDRSupport")?;
 
-    let mut response = vec![HdrOutputMode::DisableHdr];
+    let mut response = vec![];
 
-    if settop_hdr_response.result.supportsHDR & tv_hdr_response.result.supportsHDR {
-        response.insert(0, HdrOutputMode::AlwaysHdr);
+    if settop_hdr_response.result.supportsHDR {
+        response.insert(0, HdrOutputMode::HdrOnPlayback);
+    } else {
+        response.insert(0, HdrOutputMode::DisableHdr);
     }
 
     Ok(response)
diff --git a/src/device/rdk/system/settings/set.rs b/src/device/rdk/system/settings/set.rs
index 7ac014c..ca83bf9 100644
--- a/src/device/rdk/system/settings/set.rs
+++ b/src/device/rdk/system/settings/set.rs
@@ -4,7 +4,9 @@ use crate::dab::structs::DabError;
 use crate::dab::structs::HdrOutputMode;
 use crate::dab::structs::OutputResolution;
 use crate::dab::structs::SetSystemSettingsRequest;
+use crate::device::rdk::interface::rdk_request;
 use crate::device::rdk::interface::rdk_request_with_params;
+use crate::device::rdk::interface::RdkResponse;
 use crate::device::rdk::interface::RdkResponseSimple;
 
 use crate::device::rdk::system::settings::get::get_rdk_audio_port;
@@ -147,32 +149,46 @@ fn set_rdk_audio_output_source(source: AudioOutputSource) -> Result<(), DabError
 }
 
 fn set_rdk_hdr_mode(mode: HdrOutputMode) -> Result<(), DabError> {
+    if let HdrOutputMode::AlwaysHdr = mode {
+        return Err(DabError::Err400(format!(
+            "Setting hdr mode '{}' is not supported",
+            "AlwaysHdr"
+        )))
+    }
+
     #[allow(non_snake_case)]
-    #[derive(Serialize, Default)]
-    struct Param {
-        hdr_mode: bool,
+    #[allow(dead_code)]
+    #[derive(Deserialize, Debug)]
+    struct GetHDRSupport {
+        standards: Vec<String>,
+        supportsHDR: bool,
+        success: bool,
     }
 
-    let mut req_params = Param::default();
+    let settop_hdr_response: RdkResponse<GetHDRSupport> =
+        rdk_request("org.rdk.DisplaySettings.getSettopHDRSupport")?;
 
     match mode {
-        // STB HDR mode is always enable
         HdrOutputMode::AlwaysHdr => {
-            req_params.hdr_mode = true;
         }
         HdrOutputMode::HdrOnPlayback => {
-            return Err(DabError::Err500(format!(
-                "Setting hdr mode '{}' is not supported",
-                "HdrOnPlayback"
-            )))
+            if !settop_hdr_response.result.supportsHDR {
+                return Err(DabError::Err400(format!(
+                    "Setting hdr mode '{}' is not supported",
+                    "HdrOnPlayback"
+                )))
+            }
         }
         HdrOutputMode::DisableHdr => {
-            req_params.hdr_mode = false;
+            if settop_hdr_response.result.supportsHDR {
+                return Err(DabError::Err400(format!(
+                    "Setting hdr mode '{}' is not supported",
+                    "DisableHdr"
+                )))
+            }
         }
     }
 
-    let _rdkresponse: RdkResponseSimple =
-        rdk_request_with_params("org.rdk.DisplaySettings.setForceHDRMode", req_params)?;
     Ok(())
 }
 
-- 
2.43.0

